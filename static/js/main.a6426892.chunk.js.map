{"version":3,"sources":["Fbase.js","components/options/ReplyOption.js","components/options/DeleteOption.js","components/options/EditOption.js","components/options/ScopeOption.js","components/TweetOptions.js","components/TweetEditor.js","components/Tweet.js","components/comments/CommentForm.js","components/comments/CommentEditor.js","components/comments/Comment.js","routes/TweetPage.js","components/TweetForm.js","routes/Home.js","components/AuthForm.js","components/SocialSignInForm.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Router.js","routes/Loader.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","firebaseAuth","auth","firebaseInstance","firebaseStore","firestore","firebaseStorage","storage","ReplyOption","commentsLength","toggleComment","onClick","icon","faComments","DeleteOption","onDeleteTweet","faTrash","EditOption","toggleEditing","faPencilAlt","ScopeOption","IsPublic","onChangeScope","faLockOpen","faLock","TweetOptions","isCreator","isOwner","className","title","TweetEditor","tweetObject","NewTweet","setNewTweet","setIsEditing","onUpdateSubmit","event","a","preventDefault","doc","id","update","text","prev","message","success","displayName","onSubmit","type","value","placeholder","onChange","target","autoFocus","required","Tweet","UserObject","email","split","uid","creatorId","attachmentURL","src","CommentForm","useState","Comment","setComment","setIsPublic","onSubmitComment","commentObject","createdAt","Date","responseTo","collection","add","currentTarget","CommentEditor","comment","onToggleCommentEditMode","NewComment","setNewComment","PRIVATE_COMMENT","isCommentWriter","CommentEditMode","setCommentEditMode","CommentScope","setCommentScope","onDeleteComment","window","confirm","delete","onChangeCommentScope","result","TweetPage","commentsObject","useEffect","onUpdateDisplayName","IsEditing","CommentToggle","setCommentToggle","COLLECTION_NAME","where","get","then","snapshot","empty","console","log","forEach","check","tweetComments","filter","i","length","refFromURL","map","welcomeMessage","TweetForm","setTweet","AttachmentImage","setAttachmentImage","PLACEHOLDER","Math","floor","random","warn","error","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","onClearAttachment","defaultChecked","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","readAsDataURL","style","opacity","backgroundImage","alt","faTimes","Home","Tweets","setTweets","Comments","setComments","orderBy","onSnapshot","tweetArray","docs","data","commentsArray","marginTop","tweet","AuthForm","Email","setEmail","Password","setPassword","PasswordCheck","setPasswordCheck","NewAccount","setNewAccount","ErrorMessage","setErrorMessage","createUserWithEmailAndPassword","signInWithEmailAndPassword","name","SocialSignInForm","onSocialLogin","provider","GoogleAuthProvider","GithubAuthProvider","signInWithRedirect","faGoogle","faGithub","Auth","faCarrot","color","size","marginBottom","Profile","refreshUser","history","useHistory","NewDisplayName","setNewDisplayName","photoURL","PhotoURL","setPhotoURL","onUpdateProfile","warning","updateProfile","profileImageURL","faUserCircle","signOut","push","Navigation","to","marginRight","marginLeft","display","flexDirection","alignItems","fontSize","faUser","AppRouter","IsLoggedIn","exact","path","Loader","LoadingOutlined","App","Init","setInit","setUserObject","onAuthStateChanged","user","providerData","args","Boolean","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6426892.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseAuth = firebase.auth();\nexport const firebaseInstance = firebase;\nexport const firebaseStore = firebase.firestore();\nexport const firebaseStorage = firebase.storage();\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ReplyOption = ({ commentsLength, toggleComment }) => {\n  return (\n    <>\n      <span onClick={toggleComment}>\n        <FontAwesomeIcon icon={faComments} />\n      </span>\n    </>\n  );\n};\n\nexport default ReplyOption;\n\n/*\n  issue 1. ReplyTweet 기능 설정\n    > onClick Event\n      - <TweetPage />의 ToggleComment state값(Boolean)을 반전.\n*/\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nconst DeleteOption = ({ onDeleteTweet }) => {\n  return (\n    <>\n      <span onClick={onDeleteTweet}>\n        <FontAwesomeIcon icon={faTrash} />\n      </span>\n    </>\n  );\n};\n\nexport default DeleteOption;\n\n/*\n  issue A. props 변경\n    > props로 전달받은 method에 따라 삭제 대상 변경\n      - Tweet 삭제\n      - Tweet.comments 업데이트\n*/\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst EditOption = ({ toggleEditing }) => {\n  return (\n    <>\n      <span onClick={toggleEditing}>\n        <FontAwesomeIcon icon={faPencilAlt} />\n      </span>\n    </>\n  );\n};\n\nexport default EditOption;\n\n/*\n  issue A. props 변경\n    > 전달받은 props에 따라 다른 기능 수행\n      - Tweet 업데이트\n      - Tweet.comments 업데이트\n*/\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLock, faLockOpen } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ScopeOption = ({ IsPublic, onChangeScope }) => {\n  return (\n    <>\n      <span onClick={onChangeScope}>\n        <FontAwesomeIcon icon={IsPublic ? faLockOpen : faLock} />\n      </span>\n    </>\n  );\n};\n\nexport default ScopeOption;\n\n/*\n  issue A. option 대상 설정\n    > Scope가 변경시키는 대상이 tweet인지 comment인지 구분\n      - props로 대상을 전달받아 onChangeScope 함수에 인자로 전달\n*/\n","import React from \"react\";\nimport ReplyOption from \"./options/ReplyOption\";\nimport DeleteOption from \"./options/DeleteOption\";\nimport EditOption from \"./options/EditOption\";\nimport ScopeOption from \"./options/ScopeOption\";\nimport { Tooltip } from \"antd\";\n\nfunction TweetOptions({\n  isCreator,\n  isOwner,\n  onDeleteTweet,\n  toggleEditing,\n  toggleComment,\n  onChangeScope,\n  IsPublic,\n}) {\n  return (\n    <div className=\"nweet__actions\">\n      {IsPublic || isCreator || isOwner ? (\n        <Tooltip title=\"댓글\">\n          <span>\n            <ReplyOption toggleComment={toggleComment} />\n          </span>\n        </Tooltip>\n      ) : null}\n      {isCreator ? (\n        <>\n          <Tooltip title=\"삭제하기\">\n            <span>\n              <DeleteOption onDeleteTweet={onDeleteTweet} />\n            </span>\n          </Tooltip>\n          <Tooltip title=\"수정하기\">\n            <span>\n              <EditOption toggleEditing={toggleEditing} />\n            </span>\n          </Tooltip>\n          <Tooltip title=\"공개범위설정\">\n            <span>\n              <ScopeOption IsPublic={IsPublic} onChangeScope={onChangeScope} />\n            </span>\n          </Tooltip>\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default TweetOptions;\n\n/*\n  issue 1. TweetOptions 출력 조건 설정\n  > 트윗 작성자 검증\n    - isCreator(tweet.creatorId === UserObject.uid)\n  > 관리자 검증\n    - isOwner(UserObject.uid === REACT_APP_OWNER_UID)\n  > TweetOptions에 전달된 조건에 따라 options component 출력\n    A. <ReplyTweet />\n      - 공개글일 경우 모두에게 공개, 미공개글일 경우 작성자와 관리자에게만 출력\n    B. <DeleteTweet />\n      - isCreator ? <DeleteTweet /> : null\n    C. <EditTweet />\n      - isCreator ? <EditTweet /> : null\n    D. <Scope />\n      - isCreator ? <EditTweet /> : null\n\n\n*/\n","import React from \"react\";\nimport { firebaseStore } from \"Fbase\";\nimport { message } from \"antd\";\n\nconst TweetEditor = ({\n  tweetObject,\n  toggleEditing,\n  NewTweet,\n  setNewTweet,\n  setIsEditing,\n}) => {\n  const onUpdateSubmit = async (event) => {\n    event.preventDefault();\n    await firebaseStore.doc(`tweets/${tweetObject.id}`).update({\n      text: NewTweet,\n    });\n    setIsEditing((prev) => !prev);\n    return message.success(\"게시글이 업데이트 되었습니다.\");\n  };\n\n  const onEditingTweet = (event) => {\n    const { value } = event.target;\n    setNewTweet(value);\n  };\n  return (\n    <>\n      <h4>{tweetObject.displayName}</h4>\n      <form onSubmit={onUpdateSubmit} className=\"container nweetEdit\">\n        <input\n          type=\"text\"\n          value={NewTweet}\n          placeholder=\"Edit Your Tweet\"\n          onChange={onEditingTweet}\n          autoFocus\n          required\n          className=\"formInput\"\n        />\n        <input type=\"submit\" value=\"Edit Tweet\" className=\"formBtn\" />\n        <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n          Cancel\n        </span>\n      </form>\n    </>\n  );\n};\n\nexport default TweetEditor;\n","import React from \"react\";\nimport { Image } from \"antd\";\n\nconst Tweet = ({ tweetObject, UserObject }) => {\n  const OWNER_UID = process.env.REACT_APP_OWNER_UID;\n  const email = tweetObject.email.split(\"@\")[0];\n\n  return (\n    <>\n      <h4 className=\"nweet__displayName\">\n        {tweetObject.displayName}\n        <span className=\"nweet__email\">{email}</span>\n      </h4>\n      {tweetObject.IsPublic ? (\n        <>\n          <h4 className=\"nweet__text\">{tweetObject.text}</h4>\n          {tweetObject.attachmentURL && (\n            // <img src={tweetObject.attachmentURL} alt=\"첨부이미지\" />\n            <Image src={tweetObject.attachmentURL} />\n          )}\n        </>\n      ) : UserObject.uid === OWNER_UID ||\n        tweetObject.creatorId === UserObject.uid ? (\n        <>\n          <h4 className=\"nweet__text\">{tweetObject.text}</h4>\n          {tweetObject.attachmentURL && (\n            <Image src={tweetObject.attachmentURL} />\n          )}\n        </>\n      ) : (\n        <h4 className=\"nweet__text private\">비공개 게시글 입니다.</h4>\n      )}\n    </>\n  );\n};\n\nexport default Tweet;\n\n/*\n  issue 1\n    > 트윗 공개 여부에 따라 메시지 표시 or 비공개 트윗 표시\n      - tweetObject.IsPublic ? tweetObject.text : \"비공개 트윗입니다.\"\n    > 비공개 트윗일 경우 작성자이거나 OWNER 계정일 경우 공개, 다른 유저일 경우 비공개\n      - UserObject.uid === OWNER_UID || tweetObject.creatorId === UserObject.uid\n      - ? {tweetObject.text}\n      - : {\"비공개 트윗입니다.\"}\n*/\n","import React, { useState } from \"react\";\nimport { firebaseStore } from \"Fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLock, faLockOpen } from \"@fortawesome/free-solid-svg-icons\";\n\nconst CommentForm = ({ UserObject, tweetObject, toggleComment }) => {\n  const [Comment, setComment] = useState(\"\");\n  const [IsPublic, setIsPublic] = useState(true);\n\n  const onSubmitComment = async (event) => {\n    event.preventDefault();\n\n    const commentObject = {\n      email: UserObject.email,\n      displayName: UserObject.displayName,\n      text: Comment,\n      createdAt: new Date(),\n      creatorId: UserObject.uid,\n      IsPublic,\n      responseTo: tweetObject.id,\n    };\n\n    await firebaseStore.collection(\"comments\").add(commentObject);\n\n    setComment(\"\");\n  };\n\n  const onChangeComment = (event) => {\n    setComment(event.currentTarget.value);\n  };\n\n  const onChangeCommentScope = () => {\n    setIsPublic((prev) => !prev);\n  };\n\n  return (\n    <>\n      <div className=\"form__scope\" onClick={onChangeCommentScope}>\n        {IsPublic ? (\n          <>\n            <FontAwesomeIcon icon={faLockOpen} />\n            <span>댓글이 모두에게 공개됩니다.</span>\n          </>\n        ) : (\n          <>\n            <FontAwesomeIcon icon={faLock} />\n            <span>댓글이 {tweetObject.displayName} 님에게만 공개됩니다.</span>\n          </>\n        )}\n      </div>\n      <form onSubmit={onSubmitComment} className=\"container nweetEdit\">\n        <input\n          type=\"text\"\n          value={Comment}\n          placeholder=\"댓글을 입력하세요.\"\n          onChange={onChangeComment}\n          className=\"formInput\"\n          required\n        />\n        <input type=\"submit\" value=\"답글달기\" className=\"formBtn\" />\n      </form>\n    </>\n  );\n};\n\nexport default CommentForm;\n\n/*\n  issue A. comment 입력 양식 및 업데이트\n    > comment data\n      - id: String, uuidv4()를 통한 임의의 id 생성\n      - IsPublic: Boolean, 공개/비공개 여부\n      - email: String, 작성자 email\n      - displayName: String, 작성자 displayName\n      - text: String, 작성된 comment 내용\n      - createdAt: Date, 작성 시점\n      - creatorId: String, 작성자 uid\n    > update\n      - firebaseStore에서 원글의 데이터를 찾아 comments 배열 정보를 가져온다.\n      - 가져온 정보에 comment data를 추가해 update 한다.\n    \n  issue B. comment 구조 재구성\n    > 문제점: comment 등록, 업데이트, 삭제가 복잡함.\n      - tweet doc의 내부 필드값으로 comment를 관리하기가 어려움.\n    > 해결방안 : comment doc를 새로 만들고 comment를 관리\n      - comment정보와 tweet 정보를 매칭시킬 기능 구현\n        - tweet.id === comment.responseTo matching\n      - 등록(add), 업데이트(update), 삭제(delete)로 각각 하나의 기능을 수행하는 method 구성\n*/\n","import React from \"react\";\nimport { firebaseStore } from \"Fbase\";\nimport { message } from \"antd\";\n\nconst CommentEditor = ({\n  comment,\n  onToggleCommentEditMode,\n  NewComment,\n  setNewComment,\n}) => {\n  const onUpdateSubmit = async (event) => {\n    event.preventDefault();\n\n    await firebaseStore.doc(`comments/${comment.id}`).update({\n      text: NewComment,\n    });\n    onToggleCommentEditMode((prev) => !prev);\n    return message.success(\"댓글이 업데이트 되었습니다.\");\n  };\n\n  const onEditingComment = (event) => {\n    const { value } = event.target;\n    setNewComment(value);\n  };\n\n  return (\n    <>\n      <h4>{comment.displayName}</h4>\n      <form onSubmit={onUpdateSubmit} className=\"container nweetEdit\">\n        <input\n          type=\"text\"\n          value={NewComment}\n          placeholder=\"Edit Your Comment\"\n          onChange={onEditingComment}\n          autoFocus\n          required\n          className=\"formInput\"\n        />\n        <input type=\"submit\" value=\"Edit Comment\" className=\"formBtn\" />\n        <span onClick={onToggleCommentEditMode} className=\"formBtn cancelBtn\">\n          Cancel\n        </span>\n      </form>\n    </>\n  );\n};\n\nexport default CommentEditor;\n","import React, { useState } from \"react\";\nimport DeleteOption from \"components/options/DeleteOption\";\nimport EditOption from \"components/options/EditOption\";\nimport ScopeOption from \"components/options/ScopeOption\";\nimport { firebaseStore } from \"Fbase\";\nimport CommentEditor from \"./CommentEditor\";\nimport { message } from \"antd\";\n\nconst PRIVATE_COMMENT = \"비공개 댓글 입니다.\";\n\nconst Comment = ({ UserObject, tweetObject, commentObject }) => {\n  const isCommentWriter = UserObject.uid === commentObject.creatorId;\n  const [CommentEditMode, setCommentEditMode] = useState(false);\n  const [NewComment, setNewComment] = useState(commentObject.text);\n  const [CommentScope, setCommentScope] = useState(commentObject.IsPublic);\n\n  const onToggleCommentEditMode = () => {\n    setCommentEditMode((prev) => !prev);\n  };\n\n  const onDeleteComment = async () => {\n    const check = window.confirm(\"댓글을 삭제하시겠습니까?\");\n    if (check) {\n      await firebaseStore.doc(`comments/${commentObject.id}`).delete();\n      return message.success(\"댓글이 삭제되었습니다.\");\n    }\n  };\n\n  const onChangeCommentScope = async () => {\n    setCommentScope(!CommentScope);\n    await firebaseStore.doc(`comments/${commentObject.id}`).update({\n      IsPublic: !CommentScope,\n    });\n    const result = !CommentScope\n      ? \"댓글이 모두에게 공개됩니다.\"\n      : \"댓글이 게시글 작성자에게만 공개됩니다.\";\n    return message.success(result);\n  };\n\n  return (\n    <div className=\"nweet\">\n      {CommentEditMode ? (\n        <CommentEditor\n          comment={commentObject}\n          onToggleCommentEditMode={onToggleCommentEditMode}\n          NewComment={NewComment}\n          setNewComment={setNewComment}\n        />\n      ) : (\n        <>\n          <h4 className=\"nweet__displayName\">\n            {commentObject.displayName}\n            <span className=\"nweet__email\">{commentObject.email}</span>\n          </h4>\n          {commentObject.IsPublic ? (\n            <h4 className=\"nweet__text\">{commentObject.text}</h4>\n          ) : UserObject.uid === commentObject.creatorId ||\n            tweetObject.creatorId === UserObject.uid ? (\n            <>\n              <span className=\"nweet__scope\">{PRIVATE_COMMENT}</span>\n              <h4 className=\"nweet__text\">{commentObject.text}</h4>\n            </>\n          ) : (\n            <h4 className=\"nweet__text private\">{PRIVATE_COMMENT}</h4>\n          )}\n          {isCommentWriter && (\n            <div className=\"nweet__actions\">\n              <DeleteOption onDeleteTweet={onDeleteComment} />\n              <EditOption toggleEditing={onToggleCommentEditMode} />\n              <ScopeOption\n                IsPublic={CommentScope}\n                onChangeScope={onChangeCommentScope}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Comment;\n\n/*\n  issue A. Comment 출력\n    > comment 공개/비공개에 따라 comment 출력\n      - comment.IsPublic ? 공개 : 비공개\n    > 비공개일 경우 로그인 유저의 정보에 따라 공개/비공개\n      - 원글 작성자 : UserObject.uid === tweetObject.creatorId\n      - 댓글 작성자 : UserObject.uid === comment.creatorId\n      - 이 외 유저에 대해서는 비공개\n\n  issue B. TweetOptions 연결\n    > 댓글에 대한 options component 연결\n      - options component 기능 수정 후 연결\n      - Delete, Edit, Scope options component\n\n  issue C. CommentEditor component 연결\n    > edit mode ? <CommentEditer /> : <Comment />\n  \n  issue D. Edit update 반영\n    > comment update 이후 comment component에 반영되지 않음. -> 리랜더링 후 반영.\n*/\n","import React, { useState, useEffect } from \"react\";\nimport { firebaseStore, firebaseStorage } from \"../Fbase\";\nimport TweetOptions from \"../components/TweetOptions\";\nimport TweetEditor from \"components/TweetEditor\";\nimport Tweet from \"components/Tweet\";\nimport CommentForm from \"components/comments/CommentForm\";\nimport Comment from \"components/comments/Comment\";\nimport { message } from \"antd\";\n\nconst TweetPage = ({\n  isCreator,\n  isOwner,\n  tweetObject,\n  commentsObject,\n  UserObject,\n}) => {\n  useEffect(() => {\n    onUpdateDisplayName(\"tweets\");\n    onUpdateDisplayName(\"comments\");\n  });\n\n  const [IsEditing, setIsEditing] = useState(false);\n  const [CommentToggle, setCommentToggle] = useState(false);\n  const [NewTweet, setNewTweet] = useState(tweetObject.text);\n  const [IsPublic, setIsPublic] = useState(tweetObject.IsPublic);\n\n  const onUpdateDisplayName = (COLLECTION_NAME) => {\n    firebaseStore\n      .collection(COLLECTION_NAME)\n      .where(\"creatorId\", \"==\", UserObject.uid)\n      .get()\n      .then((snapshot) => {\n        if (snapshot.empty) {\n          console.log(\"No matching documents.\");\n          return;\n        }\n        snapshot.forEach((doc) => {\n          firebaseStore.collection(COLLECTION_NAME).doc(doc.id).update({\n            displayName: UserObject.displayName,\n          });\n        });\n      });\n  };\n\n  const onChangeScope = async () => {\n    setIsPublic(!IsPublic);\n    await firebaseStore.doc(`tweets/${tweetObject.id}`).update({\n      IsPublic: !IsPublic,\n    });\n    const result = !IsPublic\n      ? \"게시글이 모두에게 공개됩니다.\"\n      : \"게시글이 정병훈님에게만 공개됩니다.\";\n    return message.success(result);\n  };\n\n  const toggleEditing = () => {\n    setIsEditing((prev) => !prev);\n  };\n\n  // CommentForm에 props로 전달\n  const toggleComment = () => {\n    setCommentToggle((prev) => !prev);\n  };\n\n  const onDeleteTweet = async () => {\n    const check = window.confirm(\"정말 삭제하시겠습니까?\");\n    const tweetComments = commentsObject.filter(\n      (comment) => comment.responseTo === tweetObject.id\n    );\n    if (check) {\n      await firebaseStore.doc(`tweets/${tweetObject.id}`).delete();\n      if (tweetComments) {\n        for (let i = 0; i < tweetComments.length; i++) {\n          await firebaseStore.doc(`comments/${tweetComments[i].id}`).delete();\n        }\n      }\n      if (tweetObject.attachmentURL) {\n        await firebaseStorage.refFromURL(tweetObject.attachmentURL).delete();\n      }\n      return message.success(\"게시글이 삭제되었습니다.\");\n    }\n  };\n\n  return (\n    <div className=\"nweet\">\n      {IsEditing ? (\n        <TweetEditor\n          tweetObject={tweetObject}\n          toggleEditing={toggleEditing}\n          NewTweet={NewTweet}\n          setNewTweet={setNewTweet}\n          setIsEditing={setIsEditing}\n        />\n      ) : (\n        <>\n          <Tweet tweetObject={tweetObject} UserObject={UserObject} />\n          <TweetOptions\n            isOwner={isOwner}\n            isCreator={isCreator}\n            tweetObject={tweetObject}\n            onDeleteTweet={onDeleteTweet}\n            toggleEditing={toggleEditing}\n            toggleComment={toggleComment}\n            onChangeScope={onChangeScope}\n            IsPublic={IsPublic}\n          />\n          {isCreator && commentsObject.length > 0 && (\n            <div className=\"notice\">{`${commentsObject.length}개의 댓글이 있습니다 :)`}</div>\n          )}\n          {CommentToggle &&\n            commentsObject.map((comment) => (\n              <Comment\n                key={comment.id}\n                UserObject={UserObject}\n                tweetObject={tweetObject}\n                commentObject={comment}\n              />\n            ))}\n          {CommentToggle && (\n            <CommentForm\n              UserObject={UserObject}\n              tweetObject={tweetObject}\n              toggleComment={toggleComment}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TweetPage;\n\n/*\n  issue A. 게시글 삭제시 댓글 삭제\n    > 게시글 삭제시 해당 게시글에 있는 댓글을 같이 삭제\n      - onDeleteTweet method에 logic 추가\n */\n","import React, { useState } from \"react\";\nimport { firebaseStore, firebaseStorage } from \"../Fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { message, Switch } from \"antd\";\n\nconst welcomeMessage = [\n  \"오늘 하루 어땠나요?\",\n  \"잘 지내고 계시죠?\",\n  \"좋은 하루 되세요!\",\n  \"만나서 반갑습니다 :)\",\n];\n\nconst TweetForm = ({ UserObject }) => {\n  const [Tweet, setTweet] = useState(\"\");\n  const [AttachmentImage, setAttachmentImage] = useState(\"\");\n  const [IsPublic, setIsPublic] = useState(true);\n  const PLACEHOLDER = UserObject.displayName\n    ? `${welcomeMessage[Math.floor(Math.random() * welcomeMessage.length)]}`\n    : \"프로필에서 실명을 업데이트 후 이용해주세요.\";\n\n  const onTweet = (event) => {\n    const { value } = event.target;\n    setTweet(value);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (Tweet === \"\") return message.warn(\"게시글을 작성해 주세요.\");\n    if (UserObject.displayName === null) {\n      return message.error(\"프로필에서 닉네임을 등록 후 이용해 주세요:)\");\n    }\n\n    let attachmentURL = \"\";\n\n    if (AttachmentImage !== \"\") {\n      message.warn(\"게시글을 업로드 중입니다.\");\n      const attachmentRef = firebaseStorage\n        .ref()\n        .child(`${UserObject.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(\n        AttachmentImage,\n        \"data_url\"\n      );\n      attachmentURL = await response.ref.getDownloadURL();\n    }\n\n    const tweetObject = {\n      email: UserObject.email,\n      displayName: UserObject.displayName,\n      text: Tweet,\n      createdAt: new Date(),\n      creatorId: UserObject.uid,\n      IsPublic,\n      attachmentURL,\n    };\n\n    await firebaseStore.collection(\"tweets\").add(tweetObject);\n    setTweet(\"\");\n    onClearAttachment();\n\n    return message.success(\"게시글이 업로드 되었습니다.\");\n  };\n\n  const onFileChange = (event) => {\n    const { files } = event.target;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const { result } = finishedEvent.currentTarget;\n      setAttachmentImage(result);\n    };\n    if (theFile) reader.readAsDataURL(theFile);\n  };\n\n  const onClearAttachment = () => {\n    setAttachmentImage(\"\");\n  };\n\n  const onChangeScope = () => {\n    setIsPublic(!IsPublic);\n  };\n\n  return (\n    <>\n      <div className=\"form__scope\">\n        <Switch defaultChecked onChange={onChangeScope} />\n        {IsPublic ? (\n          <>\n            <span className=\"scope__public\">게시글이 모두에게 공개됩니다.</span>\n          </>\n        ) : (\n          <>\n            <span className=\"scope__private\">\n              게시글이 정병훈 님에게만 공개됩니다.\n            </span>\n          </>\n        )}\n      </div>\n      <form onSubmit={onSubmit} className=\"factoryForm\">\n        <div className=\"factoryInput__container\">\n          <input\n            className=\"factoryInput__input\"\n            type=\"text\"\n            placeholder={PLACEHOLDER}\n            onChange={onTweet}\n            maxLength={120}\n            value={Tweet}\n          />\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n        </div>\n        <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n          <span>Add photos</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"attach-file\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          style={{ opacity: 0 }}\n        />\n        {AttachmentImage && (\n          <div className=\"factoryForm__attachment\">\n            <img\n              src={AttachmentImage}\n              style={{\n                backgroundImage: AttachmentImage,\n              }}\n              alt=\"첨부이미지\"\n            />\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n              <span>Remove</span>\n              <FontAwesomeIcon icon={faTimes} />\n            </div>\n          </div>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default TweetForm;\n","import React, { useState, useEffect } from \"react\";\nimport { firebaseStore } from \"../Fbase\";\nimport TweetPage from \"./TweetPage\";\nimport TweetForm from \"components/TweetForm\";\nimport PropTypes from \"prop-types\";\n\nconst Home = ({ UserObject }) => {\n  const OWNER_UID = process.env.REACT_APP_OWNER_UID;\n  const isOwner = UserObject.uid === OWNER_UID;\n  const [Tweets, setTweets] = useState([]);\n  const [Comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const onTweetListener = () => {\n      firebaseStore\n        .collection(\"tweets\")\n        .orderBy(\"createdAt\", \"desc\")\n        .onSnapshot((snapshot) => {\n          const tweetArray = snapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n          setTweets(tweetArray);\n        });\n    };\n\n    const onCommentListener = () => {\n      firebaseStore\n        .collection(\"comments\")\n        .orderBy(\"createdAt\", \"asc\")\n        .onSnapshot((snapshot) => {\n          const commentsArray = snapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n          setComments(commentsArray);\n        });\n    };\n\n    onTweetListener();\n    onCommentListener();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <TweetForm UserObject={UserObject} />\n\n      <div className=\"notice\">\n        {`당근 밭에 ${Tweets.length}개의 게시글이 있습니다.`}\n      </div>\n\n      <div style={{ marginTop: 30 }}>\n        {Tweets.map((tweet) => (\n          <TweetPage\n            key={tweet.id}\n            tweetObject={tweet}\n            isCreator={UserObject.uid === tweet.creatorId}\n            isOwner={isOwner}\n            UserObject={UserObject}\n            commentsObject={Comments.filter(\n              (comment) => comment.responseTo === tweet.id\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n\nHome.propTypes = {\n  UserObject: PropTypes.object,\n};\n","import React, { useState } from \"react\";\nimport { firebaseAuth } from \"../Fbase\";\nimport { message } from \"antd\";\n\nconst AuthForm = () => {\n  const [Email, setEmail] = useState(\"\");\n  const [Password, setPassword] = useState(\"\");\n  const [PasswordCheck, setPasswordCheck] = useState(\"\");\n  const [NewAccount, setNewAccount] = useState(true);\n  const [ErrorMessage, setErrorMessage] = useState(\"\");\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (NewAccount && Password !== PasswordCheck) {\n      setErrorMessage(\"비밀번호가 일치하지 않습니다.\");\n      return;\n    }\n    try {\n      if (NewAccount) {\n        await firebaseAuth.createUserWithEmailAndPassword(Email, Password);\n        return message.success(\"계정이 성공적으로 생성되었습니다.\");\n      } else {\n        await firebaseAuth.signInWithEmailAndPassword(Email, Password);\n        return message.success(\"Welcome to Carrot Field\");\n      }\n    } catch (error) {\n      console.log(\"login form submit error :: \", error.message);\n      setErrorMessage(error.message);\n    }\n  };\n\n  const onChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    } else if (name === \"password-check\") {\n      setPasswordCheck(value);\n    }\n  };\n\n  const toggleAccount = () => {\n    setNewAccount((prev) => !prev);\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          type=\"email\"\n          placeholder=\"E-mail\"\n          name=\"email\"\n          onChange={onChange}\n          value={Email}\n          required\n          className=\"authInput\"\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          name=\"password\"\n          onChange={onChange}\n          value={Password}\n          required\n          className=\"authInput\"\n        />\n        {NewAccount && (\n          <input\n            type=\"password\"\n            placeholder=\"Password Check\"\n            name=\"password-check\"\n            onChange={onChange}\n            value={PasswordCheck}\n            required\n            className=\"authInput\"\n          />\n        )}\n        <input\n          type=\"submit\"\n          value={NewAccount ? \"계정 생성\" : \"로그인\"}\n          className=\"authInput authSubmit\"\n        />\n        {ErrorMessage && <span className=\"authError\">{ErrorMessage}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {NewAccount ? \"로그인 하기\" : \"계정 생성하기\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport { firebaseAuth, firebaseInstance } from \"Fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nfunction SocialSignInForm() {\n  const onSocialLogin = async (event) => {\n    const { name } = event.target;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await firebaseAuth.signInWithRedirect(provider);\n  };\n  return (\n    <div className=\"authBtns\">\n      <button onClick={onSocialLogin} name=\"google\" className=\"authBtn\">\n        Login with Google <FontAwesomeIcon icon={faGoogle} />\n      </button>\n      <button onClick={onSocialLogin} name=\"github\" className=\"authBtn\">\n        Login with Github <FontAwesomeIcon icon={faGithub} />\n      </button>\n    </div>\n  );\n}\n\nexport default SocialSignInForm;\n","import React from \"react\";\nimport AuthForm from \"components/AuthForm\";\nimport SocialSignInForm from \"components/SocialSignInForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCarrot } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Auth = () => {\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faCarrot}\n        color={\"orangered\"}\n        size=\"4x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <SocialSignInForm />\n    </div>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { firebaseAuth, firebaseStorage } from \"../Fbase\";\nimport { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faUserCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { message } from \"antd\";\n\nconst Profile = ({ UserObject, refreshUser }) => {\n  const history = useHistory();\n  const [NewDisplayName, setNewDisplayName] = useState(UserObject.displayName);\n  const [PhotoURL, setPhotoURL] = useState(UserObject.photoURL);\n  const onLogOut = () => {\n    firebaseAuth.signOut();\n    history.push(\"/\");\n    return message.success(\"당근밭에서 로그아웃 했습니다.\");\n  };\n\n  const onUpdateProfile = async (event) => {\n    event.preventDefault();\n    if (NewDisplayName === \"\")\n      return message.warning(\"이름 혹은 닉네임을 입력해 주세요.\");\n\n    if (UserObject.displayName !== NewDisplayName) {\n      await UserObject.updateProfile({\n        ...UserObject,\n        displayName: NewDisplayName,\n      });\n      refreshUser();\n\n      setNewDisplayName(\"\");\n    }\n\n    let profileImageURL = \"\";\n\n    if (PhotoURL !== UserObject.photoURL) {\n      message.warn(\"프로필을 업데이트 중입니다.\");\n      const attachmentRef = firebaseStorage\n        .ref()\n        .child(`${UserObject.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(PhotoURL, \"data_url\");\n      profileImageURL = await response.ref.getDownloadURL();\n\n      await UserObject.updateProfile({\n        ...UserObject,\n        photoURL: profileImageURL,\n      });\n      refreshUser();\n      setPhotoURL(profileImageURL);\n    }\n    return message.success(\"프로필이 업데이트 되었습니다.\");\n  };\n\n  const onChange = (event) => {\n    const { value } = event.target;\n    setNewDisplayName(value);\n  };\n\n  const onFileChange = (event) => {\n    const { files } = event.target;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const { result } = finishedEvent.currentTarget;\n      setPhotoURL(result);\n    };\n    if (theFile) reader.readAsDataURL(theFile);\n  };\n\n  return (\n    <div className=\"container\">\n      {PhotoURL ? (\n        <img className=\"profile__img\" alt=\"프로필 이미지\" src={PhotoURL} />\n      ) : (\n        <div className=\"profile__img__container\">\n          <FontAwesomeIcon icon={faUserCircle} size=\"6x\" />\n        </div>\n      )}\n      <form onSubmit={onUpdateProfile} className=\"profileForm\">\n        <label htmlFor=\"image-file\" className=\"profile__label\">\n          <span>프로필 이미지</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"image-file\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          style={{ opacity: 0 }}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"이름 혹은 닉네임을 입력해 주세요 :)\"\n          value={NewDisplayName}\n          onChange={onChange}\n          className=\"formInput\"\n          maxLength={8}\n        />\n        <input\n          type=\"submit\"\n          value=\"프로필 업데이트\"\n          className=\"formBtn\"\n          style={{ marginTop: 10 }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOut}>\n        로그아웃\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n\n/*\n  issue A. displayName 업데이트시 UserObject의 email 값이 사라짐.\n    > 이후 tweet 작성시 field value undefined error 발생.\n      - App.js > refreshUser method의 setUserObject에 email값 추가.\n*/\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser, faCarrot } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ UserObject }) => {\n  return (\n    <>\n      <nav>\n        <ul className=\"nav__container\">\n          <li>\n            <Link to=\"/\" style={{ marginRight: 10 }}>\n              <FontAwesomeIcon icon={faCarrot} color={\"orangered\"} size=\"2x\" />\n            </Link>\n          </li>\n          <li>\n            <Link\n              to=\"/profile\"\n              style={{\n                marginLeft: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                fontSize: 12,\n              }}\n            >\n              <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n              <span style={{ marginTop: 10 }}>\n                {UserObject.displayName\n                  ? `${UserObject.displayName}님의 프로필`\n                  : \"프로필\"}\n              </span>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"../routes/Home\";\nimport Auth from \"../routes/Auth\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ IsLoggedIn, UserObject, refreshUser }) => {\n  return (\n    <Router>\n      {IsLoggedIn && <Navigation UserObject={UserObject} />}\n      <Switch>\n        {IsLoggedIn ? (\n          <>\n            <div className=\"router__container\">\n              <Route exact path=\"/\">\n                <Home UserObject={UserObject} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile UserObject={UserObject} refreshUser={refreshUser} />\n              </Route>\n            </div>\n          </>\n        ) : (\n          <Route>\n            <Auth exact path=\"/auth\" />\n          </Route>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React from \"react\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nconst Loader = () => {\n  return (\n    <>\n      <div className=\"loader__container\">\n        <LoadingOutlined className=\"loading__icon\" />\n      </div>\n    </>\n  );\n};\n\nexport default Loader;\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"./Router\";\nimport { firebaseAuth } from \"../Fbase\";\nimport Loader from \"routes/Loader\";\nimport \"antd/dist/antd.css\";\n\nfunction App() {\n  const [Init, setInit] = useState(false);\n  const [UserObject, setUserObject] = useState(null);\n\n  useEffect(() => {\n    firebaseAuth.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObject({\n          email: user.email,\n          displayName: user.displayName,\n          uid: user.uid,\n          photoURL: user.providerData[0].photoURL || null,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObject(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = firebaseAuth.currentUser;\n    setUserObject({\n      displayName: user.displayName,\n      email: user.email,\n      uid: user.uid,\n      photoURL: user.photoURL,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <div className=\"app__container\">\n      {Init ? (\n        <AppRouter\n          IsLoggedIn={Boolean(UserObject)}\n          UserObject={UserObject}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        <Loader />\n      )}\n      <footer>&copy; Carrot Field {new Date().getFullYear()}</footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}