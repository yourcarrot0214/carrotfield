{"version":3,"sources":["Fbase.js","components/options/ReplyOption.js","components/options/DeleteOption.js","components/options/EditOption.js","components/options/ScopeOption.js","components/TweetOptions.js","components/TweetEditor.js","components/Tweet.js","components/comments/CommentForm.js","components/comments/CommentEditor.js","components/comments/Comment.js","routes/TweetPage.js","components/TweetForm.js","routes/Home.js","components/AuthForm.js","components/SocialSignInForm.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Router.js","routes/styles/spinner.gif","routes/Loader.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","firebaseAuth","auth","firebaseInstance","firebaseStore","firestore","firebaseStorage","storage","ReplyOption","commentsLength","toggleComment","onClick","icon","faComments","DeleteOption","onDeleteTweet","faTrash","EditOption","toggleEditing","faPencilAlt","ScopeOption","IsPublic","onChangeScope","faLockOpen","faLock","TweetOptions","isCreator","isOwner","tweetObject","className","TweetEditor","NewTweet","setNewTweet","setIsEditing","onUpdateSubmit","event","a","preventDefault","doc","id","update","text","prev","displayName","onSubmit","type","value","placeholder","onChange","target","autoFocus","required","Tweet","UserObject","email","uid","creatorId","attachmentURL","src","alt","CommentForm","useState","Comment","setComment","setIsPublic","onSubmitComment","commentObject","createdAt","Date","responseTo","collection","add","currentTarget","CommentEditor","comment","onToggleCommentEditMode","NewComment","setNewComment","PRIVATE_COMMENT","isCommentWriter","CommentEditMode","setCommentEditMode","onDeleteComment","window","confirm","delete","TweetPage","commentsObject","useEffect","onUpdateDisplayName","IsEditing","CommentToggle","setCommentToggle","COLLECTION_NAME","where","get","then","snapshot","empty","console","log","forEach","check","tweetComments","filter","i","length","refFromURL","map","welcomeMessage","TweetForm","setTweet","AttachmentImage","setAttachmentImage","ErrorMessage","setErrorMessage","PLACEHOLDER","Math","floor","random","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","onClearAttachment","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","readAsDataURL","style","opacity","backgroundImage","faTimes","Home","Tweets","setTweets","Comments","setComments","orderBy","onSnapshot","tweetArray","docs","data","commentsArray","marginTop","tweet","AuthForm","Email","setEmail","Password","setPassword","PasswordCheck","setPasswordCheck","NewAccount","setNewAccount","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","name","SocialSignInForm","onSocialLogin","provider","GoogleAuthProvider","GithubAuthProvider","signInWithRedirect","faGoogle","faGithub","Auth","faTwitter","color","size","marginBottom","Profile","refreshUser","history","useHistory","NewDisplayName","setNewDisplayName","photoURL","PhotoURL","setPhotoURL","onUpdateProfile","updateProfile","profileImageURL","faUserCircle","signOut","push","Navigation","to","marginRight","faCarrot","marginLeft","display","flexDirection","alignItems","fontSize","faUser","AppRouter","IsLoggedIn","exact","path","Loader","spinner","App","Init","setInit","setUserObject","onAuthStateChanged","user","providerData","args","Boolean","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73baf323.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseAuth = firebase.auth();\nexport const firebaseInstance = firebase;\nexport const firebaseStore = firebase.firestore();\nexport const firebaseStorage = firebase.storage();\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ReplyOption = ({ commentsLength, toggleComment }) => {\n  return (\n    <>\n      <span onClick={toggleComment}>\n        <FontAwesomeIcon icon={faComments} />\n      </span>\n    </>\n  );\n};\n\nexport default ReplyOption;\n\n/*\n  issue 1. ReplyTweet 기능 설정\n    > onClick Event\n      - <TweetPage />의 ToggleComment state값(Boolean)을 반전.\n*/\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nconst DeleteOption = ({ onDeleteTweet }) => {\n  return (\n    <>\n      <span onClick={onDeleteTweet}>\n        <FontAwesomeIcon icon={faTrash} />\n      </span>\n    </>\n  );\n};\n\nexport default DeleteOption;\n\n/*\n  issue A. props 변경\n    > props로 전달받은 method에 따라 삭제 대상 변경\n      - Tweet 삭제\n      - Tweet.comments 업데이트\n*/\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst EditOption = ({ toggleEditing }) => {\n  return (\n    <>\n      <span onClick={toggleEditing}>\n        <FontAwesomeIcon icon={faPencilAlt} />\n      </span>\n    </>\n  );\n};\n\nexport default EditOption;\n\n/*\n  issue A. props 변경\n    > 전달받은 props에 따라 다른 기능 수행\n      - Tweet 업데이트\n      - Tweet.comments 업데이트\n*/\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLock, faLockOpen } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ScopeOption = ({ IsPublic, onChangeScope }) => {\n  return (\n    <>\n      <span onClick={onChangeScope}>\n        <FontAwesomeIcon icon={IsPublic ? faLockOpen : faLock} />\n      </span>\n    </>\n  );\n};\n\nexport default ScopeOption;\n\n/*\n  issue A. option 대상 설정\n    > Scope가 변경시키는 대상이 tweet인지 comment인지 구분\n      - props로 대상을 전달받아 onChangeScope 함수에 인자로 전달\n*/\n","import React from \"react\";\nimport ReplyOption from \"./options/ReplyOption\";\nimport DeleteOption from \"./options/DeleteOption\";\nimport EditOption from \"./options/EditOption\";\nimport ScopeOption from \"./options/ScopeOption\";\n\nfunction TweetOptions({\n  isCreator,\n  isOwner,\n  tweetObject,\n  onDeleteTweet,\n  toggleEditing,\n  toggleComment,\n  onChangeScope,\n  IsPublic,\n}) {\n  return (\n    <div className=\"nweet__actions\">\n      {IsPublic || isCreator || isOwner ? (\n        <ReplyOption toggleComment={toggleComment} />\n      ) : null}\n      {isCreator ? (\n        <>\n          <DeleteOption onDeleteTweet={onDeleteTweet} />\n          <EditOption toggleEditing={toggleEditing} />\n          <ScopeOption IsPublic={IsPublic} onChangeScope={onChangeScope} />\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default TweetOptions;\n\n/*\n  issue 1. TweetOptions 출력 조건 설정\n  > 트윗 작성자 검증\n    - isCreator(tweet.creatorId === UserObject.uid)\n  > 관리자 검증\n    - isOwner(UserObject.uid === REACT_APP_OWNER_UID)\n  > TweetOptions에 전달된 조건에 따라 options component 출력\n    A. <ReplyTweet />\n      - 공개글일 경우 모두에게 공개, 미공개글일 경우 작성자와 관리자에게만 출력\n    B. <DeleteTweet />\n      - isCreator ? <DeleteTweet /> : null\n    C. <EditTweet />\n      - isCreator ? <EditTweet /> : null\n    D. <Scope />\n      - isCreator ? <EditTweet /> : null\n\n\n*/\n","import React from \"react\";\nimport { firebaseStore } from \"Fbase\";\n\nconst TweetEditor = ({\n  tweetObject,\n  toggleEditing,\n  NewTweet,\n  setNewTweet,\n  setIsEditing,\n}) => {\n  const onUpdateSubmit = async (event) => {\n    event.preventDefault();\n    await firebaseStore.doc(`tweets/${tweetObject.id}`).update({\n      text: NewTweet,\n    });\n    setIsEditing((prev) => !prev);\n  };\n\n  const onEditingTweet = (event) => {\n    const { value } = event.target;\n    setNewTweet(value);\n  };\n  return (\n    <>\n      <h4>{tweetObject.displayName}</h4>\n      <form onSubmit={onUpdateSubmit} className=\"container nweetEdit\">\n        <input\n          type=\"text\"\n          value={NewTweet}\n          placeholder=\"Edit Your Tweet\"\n          onChange={onEditingTweet}\n          autoFocus\n          required\n          className=\"formInput\"\n        />\n        <input type=\"submit\" value=\"Edit Tweet\" className=\"formBtn\" />\n        <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n          Cancel\n        </span>\n      </form>\n    </>\n  );\n};\n\nexport default TweetEditor;\n","import React from \"react\";\n\nconst Tweet = ({ tweetObject, UserObject }) => {\n  const OWNER_UID = process.env.REACT_APP_OWNER_UID;\n  return (\n    <>\n      <h4 className=\"nweet__displayName\">\n        {tweetObject.displayName}\n        <span className=\"nweet__email\">{tweetObject.email}</span>\n      </h4>\n      {tweetObject.IsPublic ? (\n        <>\n          <h4 className=\"nweet__text\">{tweetObject.text}</h4>\n          {tweetObject.attachmentURL && (\n            <img src={tweetObject.attachmentURL} alt=\"첨부이미지\" />\n          )}\n        </>\n      ) : UserObject.uid === OWNER_UID ||\n        tweetObject.creatorId === UserObject.uid ? (\n        <>\n          <h4 className=\"nweet__text\">{tweetObject.text}</h4>\n          {tweetObject.attachmentURL && (\n            <img src={tweetObject.attachmentURL} alt=\"첨부이미지\" />\n          )}\n        </>\n      ) : (\n        <h4 className=\"nweet__text private\">비공개 게시글 입니다.</h4>\n      )}\n    </>\n  );\n};\n\nexport default Tweet;\n\n/*\n  issue 1\n    > 트윗 공개 여부에 따라 메시지 표시 or 비공개 트윗 표시\n      - tweetObject.IsPublic ? tweetObject.text : \"비공개 트윗입니다.\"\n    > 비공개 트윗일 경우 작성자이거나 OWNER 계정일 경우 공개, 다른 유저일 경우 비공개\n      - UserObject.uid === OWNER_UID || tweetObject.creatorId === UserObject.uid\n      - ? {tweetObject.text}\n      - : {\"비공개 트윗입니다.\"}\n*/\n","import React, { useState } from \"react\";\nimport { firebaseStore } from \"Fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLock, faLockOpen } from \"@fortawesome/free-solid-svg-icons\";\n\nconst CommentForm = ({ UserObject, tweetObject, toggleComment }) => {\n  const [Comment, setComment] = useState(\"\");\n  const [IsPublic, setIsPublic] = useState(true);\n\n  const onSubmitComment = async (event) => {\n    event.preventDefault();\n\n    const commentObject = {\n      email: UserObject.email,\n      displayName: UserObject.displayName,\n      text: Comment,\n      createdAt: new Date(),\n      creatorId: UserObject.uid,\n      IsPublic,\n      responseTo: tweetObject.id,\n    };\n\n    await firebaseStore.collection(\"comments\").add(commentObject);\n\n    setComment(\"\");\n  };\n\n  const onChangeComment = (event) => {\n    setComment(event.currentTarget.value);\n  };\n\n  const onChangeCommentScope = () => {\n    setIsPublic((prev) => !prev);\n  };\n\n  return (\n    <>\n      <div className=\"form__scope\" onClick={onChangeCommentScope}>\n        {IsPublic ? (\n          <>\n            <FontAwesomeIcon icon={faLockOpen} />\n            <span>댓글이 모두에게 공개됩니다.</span>\n          </>\n        ) : (\n          <>\n            <FontAwesomeIcon icon={faLock} />\n            <span>댓글이 {tweetObject.displayName} 님에게만 공개됩니다.</span>\n          </>\n        )}\n      </div>\n      <form onSubmit={onSubmitComment} className=\"container nweetEdit\">\n        <input\n          type=\"text\"\n          value={Comment}\n          placeholder=\"댓글을 입력하세요.\"\n          onChange={onChangeComment}\n          className=\"formInput\"\n          required\n        />\n        <input type=\"submit\" value=\"답글달기\" className=\"formBtn\" />\n      </form>\n    </>\n  );\n};\n\nexport default CommentForm;\n\n/*\n  issue A. comment 입력 양식 및 업데이트\n    > comment data\n      - id: String, uuidv4()를 통한 임의의 id 생성\n      - IsPublic: Boolean, 공개/비공개 여부\n      - email: String, 작성자 email\n      - displayName: String, 작성자 displayName\n      - text: String, 작성된 comment 내용\n      - createdAt: Date, 작성 시점\n      - creatorId: String, 작성자 uid\n    > update\n      - firebaseStore에서 원글의 데이터를 찾아 comments 배열 정보를 가져온다.\n      - 가져온 정보에 comment data를 추가해 update 한다.\n    \n  issue B. comment 구조 재구성\n    > 문제점: comment 등록, 업데이트, 삭제가 복잡함.\n      - tweet doc의 내부 필드값으로 comment를 관리하기가 어려움.\n    > 해결방안 : comment doc를 새로 만들고 comment를 관리\n      - comment정보와 tweet 정보를 매칭시킬 기능 구현\n        - tweet.id === comment.responseTo matching\n      - 등록(add), 업데이트(update), 삭제(delete)로 각각 하나의 기능을 수행하는 method 구성\n*/\n","import React from \"react\";\nimport { firebaseStore } from \"Fbase\";\n\nconst CommentEditor = ({\n  comment,\n  onToggleCommentEditMode,\n  NewComment,\n  setNewComment,\n}) => {\n  const onUpdateSubmit = async (event) => {\n    event.preventDefault();\n\n    await firebaseStore.doc(`comments/${comment.id}`).update({\n      text: NewComment,\n    });\n    onToggleCommentEditMode((prev) => !prev);\n  };\n\n  const onEditingComment = (event) => {\n    const { value } = event.target;\n    setNewComment(value);\n  };\n\n  return (\n    <>\n      <h4>{comment.displayName}</h4>\n      <form onSubmit={onUpdateSubmit} className=\"container nweetEdit\">\n        <input\n          type=\"text\"\n          value={NewComment}\n          placeholder=\"Edit Your Comment\"\n          onChange={onEditingComment}\n          autoFocus\n          required\n          className=\"formInput\"\n        />\n        <input type=\"submit\" value=\"Edit Comment\" className=\"formBtn\" />\n        <span onClick={onToggleCommentEditMode} className=\"formBtn cancelBtn\">\n          Cancel\n        </span>\n      </form>\n    </>\n  );\n};\n\nexport default CommentEditor;\n","import React, { useState } from \"react\";\nimport DeleteOption from \"components/options/DeleteOption\";\nimport EditOption from \"components/options/EditOption\";\nimport ScopeOption from \"components/options/ScopeOption\";\nimport { firebaseStore } from \"Fbase\";\nimport CommentEditor from \"./CommentEditor\";\n\nconst PRIVATE_COMMENT = \"비공개 댓글 입니다.\";\n\nconst Comment = ({ UserObject, tweetObject, commentObject }) => {\n  const isCommentWriter = UserObject.uid === commentObject.creatorId;\n  const [CommentEditMode, setCommentEditMode] = useState(false);\n  const [NewComment, setNewComment] = useState(commentObject.text);\n\n  const onToggleCommentEditMode = () => {\n    setCommentEditMode((prev) => !prev);\n  };\n\n  const onDeleteComment = async () => {\n    const check = window.confirm(\"댓글을 삭제하시겠습니까?\");\n    if (check) {\n      await firebaseStore.doc(`comments/${commentObject.id}`).delete();\n    }\n  };\n\n  return (\n    <div className=\"nweet\">\n      {CommentEditMode ? (\n        <CommentEditor\n          comment={commentObject}\n          onToggleCommentEditMode={onToggleCommentEditMode}\n          NewComment={NewComment}\n          setNewComment={setNewComment}\n        />\n      ) : (\n        <>\n          <h4 className=\"nweet__displayName\">\n            {commentObject.displayName}\n            <span className=\"nweet__email\">{commentObject.email}</span>\n          </h4>\n          {commentObject.IsPublic ? (\n            <h4 className=\"nweet__text\">{commentObject.text}</h4>\n          ) : UserObject.uid === commentObject.creatorId ||\n            tweetObject.creatorId === UserObject.uid ? (\n            <>\n              <span className=\"nweet__scope\">{PRIVATE_COMMENT}</span>\n              <h4 className=\"nweet__text\">{commentObject.text}</h4>\n            </>\n          ) : (\n            <h4 className=\"nweet__text private\">{PRIVATE_COMMENT}</h4>\n          )}\n          {isCommentWriter && (\n            <div className=\"nweet__actions\">\n              <DeleteOption onDeleteTweet={onDeleteComment} />\n              <EditOption toggleEditing={onToggleCommentEditMode} />\n              <ScopeOption IsPublic={commentObject.IsPublic} />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Comment;\n\n/*\n  issue A. Comment 출력\n    > comment 공개/비공개에 따라 comment 출력\n      - comment.IsPublic ? 공개 : 비공개\n    > 비공개일 경우 로그인 유저의 정보에 따라 공개/비공개\n      - 원글 작성자 : UserObject.uid === tweetObject.creatorId\n      - 댓글 작성자 : UserObject.uid === comment.creatorId\n      - 이 외 유저에 대해서는 비공개\n\n  issue B. TweetOptions 연결\n    > 댓글에 대한 options component 연결\n      - options component 기능 수정 후 연결\n      - Delete, Edit, Scope options component\n\n  issue C. CommentEditor component 연결\n    > edit mode ? <CommentEditer /> : <Comment />\n  \n  issue D. Edit update 반영\n    > comment update 이후 comment component에 반영되지 않음. -> 리랜더링 후 반영.\n*/\n","import React, { useState, useEffect } from \"react\";\nimport { firebaseStore, firebaseStorage } from \"../Fbase\";\nimport TweetOptions from \"../components/TweetOptions\";\nimport TweetEditor from \"components/TweetEditor\";\nimport Tweet from \"components/Tweet\";\nimport CommentForm from \"components/comments/CommentForm\";\nimport Comment from \"components/comments/Comment\";\n\nconst TweetPage = ({\n  isCreator,\n  isOwner,\n  tweetObject,\n  commentsObject,\n  UserObject,\n}) => {\n  useEffect(() => {\n    onUpdateDisplayName(\"tweets\");\n    onUpdateDisplayName(\"comments\");\n  });\n\n  const [IsEditing, setIsEditing] = useState(false);\n  const [CommentToggle, setCommentToggle] = useState(false);\n  const [NewTweet, setNewTweet] = useState(tweetObject.text);\n  const [IsPublic, setIsPublic] = useState(tweetObject.IsPublic);\n\n  const onUpdateDisplayName = (COLLECTION_NAME) => {\n    firebaseStore\n      .collection(COLLECTION_NAME)\n      .where(\"creatorId\", \"==\", UserObject.uid)\n      .get()\n      .then((snapshot) => {\n        if (snapshot.empty) {\n          console.log(\"No matching documents.\");\n          return;\n        }\n        snapshot.forEach((doc) => {\n          firebaseStore.collection(COLLECTION_NAME).doc(doc.id).update({\n            displayName: UserObject.displayName,\n          });\n        });\n      });\n  };\n\n  const onChangeScope = async () => {\n    setIsPublic(!IsPublic);\n    await firebaseStore.doc(`tweets/${tweetObject.id}`).update({\n      IsPublic: !IsPublic,\n    });\n  };\n\n  const toggleEditing = () => {\n    setIsEditing((prev) => !prev);\n  };\n\n  // CommentForm에 props로 전달\n  const toggleComment = () => {\n    setCommentToggle((prev) => !prev);\n  };\n\n  const onDeleteTweet = async () => {\n    const check = window.confirm(\"정말 삭제하시겠습니까?\");\n    const tweetComments = commentsObject.filter(\n      (comment) => comment.responseTo === tweetObject.id\n    );\n    if (check) {\n      await firebaseStore.doc(`tweets/${tweetObject.id}`).delete();\n      if (tweetComments) {\n        for (let i = 0; i < tweetComments.length; i++) {\n          await firebaseStore.doc(`comments/${tweetComments[i].id}`).delete();\n        }\n      }\n      if (tweetObject.attachmentURL)\n        await firebaseStorage.refFromURL(tweetObject.attachmentURL).delete();\n    }\n  };\n\n  return (\n    <div className=\"nweet\">\n      {IsEditing ? (\n        <TweetEditor\n          tweetObject={tweetObject}\n          toggleEditing={toggleEditing}\n          NewTweet={NewTweet}\n          setNewTweet={setNewTweet}\n          setIsEditing={setIsEditing}\n        />\n      ) : (\n        <>\n          <Tweet tweetObject={tweetObject} UserObject={UserObject} />\n          <TweetOptions\n            isOwner={isOwner}\n            isCreator={isCreator}\n            tweetObject={tweetObject}\n            onDeleteTweet={onDeleteTweet}\n            toggleEditing={toggleEditing}\n            toggleComment={toggleComment}\n            onChangeScope={onChangeScope}\n            IsPublic={IsPublic}\n          />\n          {isCreator && commentsObject.length > 0 && (\n            <div className=\"notice\">{`${commentsObject.length}개의 댓글이 있습니다 :)`}</div>\n          )}\n          {CommentToggle &&\n            commentsObject.map((comment) => (\n              <Comment\n                key={comment.id}\n                UserObject={UserObject}\n                tweetObject={tweetObject}\n                commentObject={comment}\n              />\n            ))}\n          {CommentToggle && (\n            <CommentForm\n              UserObject={UserObject}\n              tweetObject={tweetObject}\n              toggleComment={toggleComment}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TweetPage;\n\n/*\n  issue A. 게시글 삭제시 댓글 삭제\n    > 게시글 삭제시 해당 게시글에 있는 댓글을 같이 삭제\n      - onDeleteTweet method에 logic 추가\n */\n","import React, { useState } from \"react\";\nimport { firebaseStore, firebaseStorage } from \"../Fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlus,\n  faTimes,\n  faLock,\n  faLockOpen,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst welcomeMessage = [\n  \"오늘 하루 어땠나요?\",\n  \"잘 지내고 계시죠?\",\n  \"좋은 하루 되세요!\",\n  \"만나서 반갑습니다 :)\",\n];\n\nconst TweetForm = ({ UserObject }) => {\n  const [Tweet, setTweet] = useState(\"\");\n  const [AttachmentImage, setAttachmentImage] = useState(\"\");\n  const [IsPublic, setIsPublic] = useState(true);\n  const [ErrorMessage, setErrorMessage] = useState(\"\");\n  const PLACEHOLDER = UserObject.displayName\n    ? `${welcomeMessage[Math.floor(Math.random() * welcomeMessage.length)]}`\n    : \"프로필에서 실명을 업데이트 후 이용해주세요.\";\n  const onTweet = (event) => {\n    const { value } = event.target;\n    setTweet(value);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (Tweet === \"\") return;\n    if (UserObject.displayName === null) {\n      setErrorMessage(\"프로필에서 닉네임 혹은 실명을 등록해 주세요.\");\n      return;\n    }\n\n    let attachmentURL = \"\";\n\n    if (AttachmentImage !== \"\") {\n      const attachmentRef = firebaseStorage\n        .ref()\n        .child(`${UserObject.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(\n        AttachmentImage,\n        \"data_url\"\n      );\n      attachmentURL = await response.ref.getDownloadURL();\n    }\n\n    const tweetObject = {\n      email: UserObject.email,\n      displayName: UserObject.displayName,\n      text: Tweet,\n      createdAt: new Date(),\n      creatorId: UserObject.uid,\n      IsPublic,\n      attachmentURL,\n    };\n\n    await firebaseStore.collection(\"tweets\").add(tweetObject);\n    setTweet(\"\");\n    onClearAttachment();\n  };\n\n  const onFileChange = (event) => {\n    const { files } = event.target;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const { result } = finishedEvent.currentTarget;\n      setAttachmentImage(result);\n    };\n    if (theFile) reader.readAsDataURL(theFile);\n  };\n\n  const onClearAttachment = () => {\n    setAttachmentImage(\"\");\n  };\n\n  const onChangeScope = () => {\n    setIsPublic(!IsPublic);\n  };\n\n  return (\n    <>\n      <div className=\"form__scope\" onClick={onChangeScope}>\n        {IsPublic ? (\n          <>\n            <FontAwesomeIcon icon={faLockOpen} />\n            <span>게시글이 모두에게 공개됩니다.</span>\n          </>\n        ) : (\n          <>\n            <FontAwesomeIcon icon={faLock} />\n            <span>게시글이 정병훈 님에게만 공개됩니다.</span>\n          </>\n        )}\n      </div>\n      <form onSubmit={onSubmit} className=\"factoryForm\">\n        <div className=\"factoryInput__container\">\n          <input\n            className=\"factoryInput__input\"\n            type=\"text\"\n            placeholder={PLACEHOLDER}\n            onChange={onTweet}\n            maxLength={120}\n            value={Tweet}\n          />\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n        </div>\n        {ErrorMessage && <span className=\"authError\">{ErrorMessage}</span>}\n        <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n          <span>Add photos</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"attach-file\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          style={{ opacity: 0 }}\n        />\n        {AttachmentImage && (\n          <div className=\"factoryForm__attachment\">\n            <img\n              src={AttachmentImage}\n              style={{\n                backgroundImage: AttachmentImage,\n              }}\n              alt=\"첨부이미지\"\n            />\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n              <span>Remove</span>\n              <FontAwesomeIcon icon={faTimes} />\n            </div>\n          </div>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default TweetForm;\n","import React, { useState, useEffect } from \"react\";\nimport { firebaseStore } from \"../Fbase\";\nimport TweetPage from \"./TweetPage\";\nimport TweetForm from \"components/TweetForm\";\nimport PropTypes from \"prop-types\";\n\nconst Home = ({ UserObject }) => {\n  const OWNER_UID = process.env.REACT_APP_OWNER_UID;\n  const isOwner = UserObject.uid === OWNER_UID;\n  const [Tweets, setTweets] = useState([]);\n  const [Comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const onTweetListener = () => {\n      firebaseStore\n        .collection(\"tweets\")\n        .orderBy(\"createdAt\", \"desc\")\n        .onSnapshot((snapshot) => {\n          const tweetArray = snapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n          setTweets(tweetArray);\n        });\n    };\n\n    const onCommentListener = () => {\n      firebaseStore\n        .collection(\"comments\")\n        .orderBy(\"createdAt\", \"asc\")\n        .onSnapshot((snapshot) => {\n          const commentsArray = snapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n          setComments(commentsArray);\n        });\n    };\n\n    onTweetListener();\n    onCommentListener();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <TweetForm UserObject={UserObject} />\n\n      <div className=\"notice\">\n        {`당근 밭에 ${Tweets.length}개의 게시글이 있습니다.`}\n      </div>\n\n      <div style={{ marginTop: 30 }}>\n        {Tweets.map((tweet) => (\n          <TweetPage\n            key={tweet.id}\n            tweetObject={tweet}\n            isCreator={UserObject.uid === tweet.creatorId}\n            isOwner={isOwner}\n            UserObject={UserObject}\n            commentsObject={Comments.filter(\n              (comment) => comment.responseTo === tweet.id\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n\nHome.propTypes = {\n  UserObject: PropTypes.object,\n};\n","import React, { useState } from \"react\";\nimport { firebaseAuth } from \"../Fbase\";\n\nconst AuthForm = () => {\n  const [Email, setEmail] = useState(\"\");\n  const [Password, setPassword] = useState(\"\");\n  const [PasswordCheck, setPasswordCheck] = useState(\"\");\n  const [NewAccount, setNewAccount] = useState(true);\n  const [ErrorMessage, setErrorMessage] = useState(\"\");\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (NewAccount && Password !== PasswordCheck) {\n      setErrorMessage(\"비밀번호가 일치하지 않습니다.\");\n      return;\n    }\n    try {\n      let data;\n      if (NewAccount) {\n        data = await firebaseAuth.createUserWithEmailAndPassword(\n          Email,\n          Password\n        );\n      } else {\n        data = await firebaseAuth.signInWithEmailAndPassword(Email, Password);\n        console.log(\"login data ::\", data);\n      }\n    } catch (error) {\n      console.log(\"login form submit error :: \", error.message);\n      setErrorMessage(error.message);\n    }\n  };\n\n  const onChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    } else if (name === \"password-check\") {\n      setPasswordCheck(value);\n    }\n  };\n\n  const toggleAccount = () => {\n    setNewAccount((prev) => !prev);\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          type=\"email\"\n          placeholder=\"E-mail\"\n          name=\"email\"\n          onChange={onChange}\n          value={Email}\n          required\n          className=\"authInput\"\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          name=\"password\"\n          onChange={onChange}\n          value={Password}\n          required\n          className=\"authInput\"\n        />\n        {NewAccount && (\n          <input\n            type=\"password\"\n            placeholder=\"Password Check\"\n            name=\"password-check\"\n            onChange={onChange}\n            value={PasswordCheck}\n            required\n            className=\"authInput\"\n          />\n        )}\n        <input\n          type=\"submit\"\n          value={NewAccount ? \"계정 생성\" : \"로그인\"}\n          className=\"authInput authSubmit\"\n        />\n        {ErrorMessage && <span className=\"authError\">{ErrorMessage}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {NewAccount ? \"로그인 하기\" : \"계정 생성하기\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport { firebaseAuth, firebaseInstance } from \"Fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nfunction SocialSignInForm() {\n  const onSocialLogin = async (event) => {\n    const { name } = event.target;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await firebaseAuth.signInWithRedirect(provider);\n  };\n  return (\n    <div className=\"authBtns\">\n      <button onClick={onSocialLogin} name=\"google\" className=\"authBtn\">\n        Login with Google <FontAwesomeIcon icon={faGoogle} />\n      </button>\n      <button onClick={onSocialLogin} name=\"github\" className=\"authBtn\">\n        Login with Github <FontAwesomeIcon icon={faGithub} />\n      </button>\n    </div>\n  );\n}\n\nexport default SocialSignInForm;\n","import React from \"react\";\nimport AuthForm from \"components/AuthForm\";\nimport SocialSignInForm from \"components/SocialSignInForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <SocialSignInForm />\n    </div>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { firebaseAuth, firebaseStorage, firebaseStore } from \"../Fbase\";\nimport { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faUserCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst Profile = ({ UserObject, refreshUser }) => {\n  const history = useHistory();\n  const [NewDisplayName, setNewDisplayName] = useState(UserObject.displayName);\n  const [PhotoURL, setPhotoURL] = useState(UserObject.photoURL);\n  const onLogOut = () => {\n    firebaseAuth.signOut();\n    history.push(\"/\");\n  };\n\n  const onUpdateProfile = async (event) => {\n    event.preventDefault();\n\n    if (UserObject.displayName !== NewDisplayName) {\n      await UserObject.updateProfile({\n        ...UserObject,\n        displayName: NewDisplayName,\n      });\n      refreshUser();\n\n      setNewDisplayName(\"\");\n    }\n\n    let profileImageURL = \"\";\n\n    if (PhotoURL !== UserObject.photoURL) {\n      const attachmentRef = firebaseStorage\n        .ref()\n        .child(`${UserObject.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(PhotoURL, \"data_url\");\n      profileImageURL = await response.ref.getDownloadURL();\n\n      await UserObject.updateProfile({\n        ...UserObject,\n        photoURL: profileImageURL,\n      });\n      refreshUser();\n      setPhotoURL(profileImageURL);\n    }\n  };\n\n  const onChange = (event) => {\n    const { value } = event.target;\n    setNewDisplayName(value);\n  };\n\n  const onFileChange = (event) => {\n    const { files } = event.target;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const { result } = finishedEvent.currentTarget;\n      setPhotoURL(result);\n    };\n    if (theFile) reader.readAsDataURL(theFile);\n  };\n\n  return (\n    <div className=\"container\">\n      {PhotoURL ? (\n        <img className=\"profile__img\" alt=\"프로필 이미지\" src={PhotoURL} />\n      ) : (\n        <div className=\"profile__img__container\">\n          <FontAwesomeIcon icon={faUserCircle} size=\"6x\" />\n        </div>\n      )}\n      <form onSubmit={onUpdateProfile} className=\"profileForm\">\n        <label htmlFor=\"image-file\" className=\"profile__label\">\n          <span>프로필 이미지</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"image-file\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          style={{ opacity: 0 }}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"실명을 입력해 주세요 :)\"\n          value={NewDisplayName}\n          onChange={onChange}\n          className=\"formInput\"\n          maxLength={8}\n        />\n        <input\n          type=\"submit\"\n          value=\"프로필 업데이트\"\n          className=\"formBtn\"\n          style={{ marginTop: 10 }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOut}>\n        로그아웃\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n\n/*\n  issue A. displayName 업데이트시 UserObject의 email 값이 사라짐.\n    > 이후 tweet 작성시 field value undefined error 발생.\n      - App.js > refreshUser method의 setUserObject에 email값 추가.\n*/\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser, faCarrot } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ UserObject }) => {\n  return (\n    <>\n      <nav>\n        <ul className=\"nav__container\">\n          <li>\n            <Link to=\"/\" style={{ marginRight: 10 }}>\n              <FontAwesomeIcon icon={faCarrot} color={\"#04AAFF\"} size=\"2x\" />\n            </Link>\n          </li>\n          <li>\n            <Link\n              to=\"/profile\"\n              style={{\n                marginLeft: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                fontSize: 12,\n              }}\n            >\n              <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n              <span style={{ marginTop: 10 }}>\n                {UserObject.displayName\n                  ? `${UserObject.displayName}님의 프로필`\n                  : \"프로필\"}\n              </span>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"../routes/Home\";\nimport Auth from \"../routes/Auth\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ IsLoggedIn, UserObject, refreshUser }) => {\n  return (\n    <Router>\n      {IsLoggedIn && <Navigation UserObject={UserObject} />}\n      <Switch>\n        {IsLoggedIn ? (\n          <>\n            <div className=\"router__container\">\n              <Route exact path=\"/\">\n                <Home UserObject={UserObject} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile UserObject={UserObject} refreshUser={refreshUser} />\n              </Route>\n            </div>\n          </>\n        ) : (\n          <Route>\n            <Auth exact path=\"/auth\" />\n          </Route>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","export default __webpack_public_path__ + \"static/media/spinner.0204eb8c.gif\";","import React from \"react\";\nimport spinner from \"./styles/spinner.gif\";\n\nconst Loader = () => {\n  return (\n    <>\n      <div className=\"loader__container\">\n        <img src={spinner} alt=\"Loading\" className=\"loader__img\" />\n      </div>\n    </>\n  );\n};\n\nexport default Loader;\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"./Router\";\nimport { firebaseAuth } from \"../Fbase\";\nimport Loader from \"routes/Loader\";\n\nfunction App() {\n  const [Init, setInit] = useState(false);\n  const [UserObject, setUserObject] = useState(null);\n\n  useEffect(() => {\n    firebaseAuth.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObject({\n          email: user.email,\n          displayName: user.displayName,\n          uid: user.uid,\n          photoURL: user.providerData[0].photoURL || null,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObject(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = firebaseAuth.currentUser;\n    setUserObject({\n      displayName: user.displayName,\n      email: user.email,\n      uid: user.uid,\n      photoURL: user.photoURL,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <div className=\"app__container\">\n      {Init ? (\n        <AppRouter\n          IsLoggedIn={Boolean(UserObject)}\n          UserObject={UserObject}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        <Loader />\n      )}\n      <footer>&copy; Carrot Field {new Date().getFullYear()}</footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}